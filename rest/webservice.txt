## httpstatus spring
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html
102 - Processing

200 - success
201 - created
202 - accepted
204 - no content

300 - Multiple Choices
301 - Moved Permanently

400 - bad request
401 - Unauthorized.
402 - Payment Required
403 - Forbidden.
404 - resources not found
405 - Method Not Allowed.
408 - Request Timeout
422 - Unprocessable Entity.

500 - server error
501 - Not Implemented.
503 - Service Unavailable.
504 - Gateway Timeout.


http://localhost:8080/swagger-ui/index.html
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.0.0</version>
		</dependency>


Content Negotiation - different header value for types, accept-language
Same resource, same URI
- different content type - XML ir JSON
- different language - English or Polish

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

to get response in json/xml
Header - Accept -> application/json
Header - Accept -> application/xml

Internationalization - i18n
- have consumers from around the world
- typically HTTP Request Header - Accept-Language


HTTP stands for Hypertext Transfer Protocol, which is the standard protocol for communication between web clients and servers.
HTTP methods are the actions that clients can request from servers, such as GET, POST, PUT, PATCH, DELETE.
REST stands for Representational State Transfer, which is a set of principles and best practices for designing web APIs. 
RESTful APIs are web APIs that follow the REST principles, such as using HTTP methods to perform operations on resources, using uniform and meaningful URLs to identify resources, and using standard formats to exchange data, such as JSON or XML. 
RESTful APIs aim to be simple, stateless, scalable, and consistent.
Path parameters are request parameters attached to a URL that point to a specific REST API resource. The path parameter is separated from the URL by a `/`, and from the query parameter(s) by a question mark (`?`). 
The path parameter defines the resource location, while the query parameter defines sort, pagination, or filter operations.

OPTIONS method returns info about API (methods/content type)
HEAD method returns info about resource (version/length/type)

